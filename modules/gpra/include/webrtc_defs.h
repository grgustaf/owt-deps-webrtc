#ifndef GPRA_WEBRTC_DEFS
#define GPRA_WEBRTC_DEFS
#include <stdint.h>
#ifndef WEBRTC_MODULES_INCLUDE_MODULE_COMMON_TYPES_H_
namespace webrtc {
	struct PacedPacketInfo {
		PacedPacketInfo() {}
		PacedPacketInfo(int probe_cluster_id,
			int probe_cluster_min_probes,
			int probe_cluster_min_bytes)
			: probe_cluster_id(probe_cluster_id),
			probe_cluster_min_probes(probe_cluster_min_probes),
			probe_cluster_min_bytes(probe_cluster_min_bytes) {}

		bool operator==(const PacedPacketInfo& rhs) const {
			return send_bitrate_bps == rhs.send_bitrate_bps &&
				probe_cluster_id == rhs.probe_cluster_id &&
				probe_cluster_min_probes == rhs.probe_cluster_min_probes &&
				probe_cluster_min_bytes == rhs.probe_cluster_min_bytes;
		}

		static constexpr int kNotAProbe = -1;
		int send_bitrate_bps = -1;
		int probe_cluster_id = kNotAProbe;
		int probe_cluster_min_probes = -1;
		int probe_cluster_min_bytes = -1;
	};
}
#endif
#ifndef WEBRTC_MODULES_RTP_RTCP_INCLUDE_RTP_RTCP_DEFINES_H_
namespace webrtc {
	struct PacketFeedback {
		PacketFeedback(int64_t arrival_time_ms, uint16_t sequence_number)
			: PacketFeedback(-1,
				arrival_time_ms,
				-1,
				sequence_number,
				0,
				0,
				0,
				PacedPacketInfo()) {}

		PacketFeedback(int64_t arrival_time_ms,
			int64_t send_time_ms,
			uint16_t sequence_number,
			size_t payload_size,
			const PacedPacketInfo& pacing_info)
			: PacketFeedback(-1,
				arrival_time_ms,
				send_time_ms,
				sequence_number,
				payload_size,
				0,
				0,
				pacing_info) {}

		PacketFeedback(int64_t creation_time_ms,
			uint16_t sequence_number,
			size_t payload_size,
			uint16_t local_net_id,
			uint16_t remote_net_id,
			const PacedPacketInfo& pacing_info)
			: PacketFeedback(creation_time_ms,
				-1,
				-1,
				sequence_number,
				payload_size,
				local_net_id,
				remote_net_id,
				pacing_info) {}

		PacketFeedback(int64_t creation_time_ms,
			int64_t arrival_time_ms,
			int64_t send_time_ms,
			uint16_t sequence_number,
			size_t payload_size,
			uint16_t local_net_id,
			uint16_t remote_net_id,
			const PacedPacketInfo& pacing_info)
			: creation_time_ms(creation_time_ms),
			arrival_time_ms(arrival_time_ms),
			send_time_ms(send_time_ms),
			sequence_number(sequence_number),
			payload_size(payload_size),
			local_net_id(local_net_id),
			remote_net_id(remote_net_id),
			pacing_info(pacing_info) {}

		static constexpr int kNotAProbe = -1;
		static constexpr int64_t kNotReceived = -1;

		// NOTE! The variable |creation_time_ms| is not used when testing equality.
		//       This is due to |creation_time_ms| only being used by SendTimeHistory
		//       for book-keeping, and is of no interest outside that class.
		// TODO(philipel): Remove |creation_time_ms| from PacketFeedback when cleaning
		//                 up SendTimeHistory.
		bool operator==(const PacketFeedback& rhs) const {
			return arrival_time_ms == rhs.arrival_time_ms &&
				send_time_ms == rhs.send_time_ms &&
				sequence_number == rhs.sequence_number &&
				payload_size == rhs.payload_size && pacing_info == rhs.pacing_info;
		}

		// Time corresponding to when this object was created.
		int64_t creation_time_ms;
		// Time corresponding to when the packet was received. Timestamped with the
		// receiver's clock. For unreceived packet, the sentinel value kNotReceived
		// is used.
		int64_t arrival_time_ms;
		// Time corresponding to when the packet was sent, timestamped with the
		// sender's clock.
		int64_t send_time_ms;
		// Packet identifier, incremented with 1 for every packet generated by the
		// sender.
		uint16_t sequence_number;
		// Size of the packet excluding RTP headers.
		size_t payload_size;
		// The network route ids that this packet is associated with.
		uint16_t local_net_id;
		uint16_t remote_net_id;
		// Pacing information about this packet.
		PacedPacketInfo pacing_info;
	};
}
#endif
#ifndef WEBRTC_MODULES_CONGESTION_CONTROLLER_DELAY_BASED_BWE_H_
namespace webrtc {
	class DelayBasedBwe {
	public:
		struct Result {
			Result() : updated(false), probe(false), target_bitrate_bps(0) {}
			Result(bool probe, uint32_t target_bitrate_bps)
				: updated(true), probe(probe), target_bitrate_bps(target_bitrate_bps) {}
			bool updated;
			bool probe;
			uint32_t target_bitrate_bps;
		};
	};
}
#endif
#endif